#!/usr/bin/perl

use strict;
use warnings;

use File::Find;
use File::Spec;
use File::Path;

use Cwd 'abs_path';
use Getopt::Long;

use XML::LibXML;
use XML::Writer;

use IO::File;

my ($from, $to, $tag, $tagout, $restype);
GetOptions("tag=s" => \$tag, 
	   "tagout=s" => \$tagout, 
	   "restype=s" => \$restype, 
	   "from=s" => \$from, 
	   "to=s" => \$to);
if (!$from || !$to || !$tag || !$tagout) {
    usage();
}
$to = abs_path($to);

find({ wanted => \&wanted, follow => 1 }, $from);

sub wanted {
    # Only cares about 'strings.xml' files
    return unless $_ =~ /^strings.xml$/;

    # Parse the file and look for the requested name tag
    my $parser = XML::LibXML->new;
    my $doc = $parser->parse_file($_);
    my ($elem1) = $doc->findnodes("//comment()[following-sibling::string[1][\@name = '$tag']]");
    my ($elem2) = $doc->findnodes("//string[\@name='$tag']/text()");
    # Skip file if the tag is not present
    return unless $elem2;
    
    # extract the value string
    my $comment_text = $elem1->data if $elem1;
    my $value = $elem2->data;

    # Create output dir if needed
    my @path = File::Spec->splitdir($File::Find::dir);
    my $dir = File::Spec->catfile($to, $path[-1]);
    File::Path->make_path($dir, { mode => 0777 }) unless -d "$dir";
    
    my $add_res = 1 if ($path[-1] eq "values");

    # Build the output file path
    my $file = File::Spec->catfile($dir, "strings.xml");
    if (-e $file) {
	# The file exists. Insert the tag + value from the source

	# Parse the existing file
	my $doc = $parser->parse_file($file);
#	my $xpc = XML::LibXML::XPathContext->new($doc);
#	$xpc->registerNs(xliff => 'urn:oasis:names:tc:xliff:document:1.2');

	# Check if tag is already present
	my @items = $doc->findnodes("//string[\@name='$tagout']");
	if (scalar(@items) > 0) {
	    # tag present, print warning and continue
	    print "Warning! tag $tag already present in $file\n";
	    return;
	}

	# Find the parent node and create and insert the new node
	my ($parent) = $doc->findnodes("//resources");
	if ($comment_text) {
	    my $comment = XML::LibXML::Comment->new($comment_text);
	    $parent->appendChild($comment);
	}

	my $string = $doc->createElement("string");
	$string->setAttribute("name", $tagout);
	if ($add_res) {
	    $string->setAttribute("xliff:restype", $restype);	
	}
	my $text = XML::LibXML::Text->new($value);
	$string->appendChild($text);
	$parent->appendChild($string);

	# Output the result
	open OUTPUT, ">$file" or die "cannot open \'$file\' for writing\n";
	print OUTPUT $doc->toString();
	close OUTPUT;
    } else {
	my $output = new IO::File(">$file");
	my $doc = XML::Writer->new(OUTPUT => $output, ENCODING => "utf-8");
	
	# Output new xml file
	$doc->xmlDecl("utf-8");
	$doc->startTag("resources", "xmlns:xliff" => "urn:oasis:names:tc:xliff:document:1.2");
	$doc->comment($comment_text);
	if ($add_res) {
	    $doc->dataElement("string", $value, "name" => $tagout, "xliff:restype" => $restype);
	} else {
	    $doc->dataElement("string", $value, "name" => $tagout);
	}
	$doc->endTag("resources");
	$doc->end();
	$output->close();
    }

    # Pretty-print the output file
    my $out = `xmllint --format $file`;
    open OUTPUT, ">$file" or die "cannot open \'$file\' for writing\n";
    print OUTPUT $out;
    close OUTPUT;
}

sub usage {
    my ($msg) = @_;

    if ($msg) {
	print "error: $msg\n";
    }
    print "usage: $0 --tag <tag> --tagout <tag> --from <path> --to <path>\n";
    exit(1);
}
