#!/usr/bin/perl

use strict;
use warnings;

use File::Find;
use File::Spec;
use File::Path;

use Cwd 'abs_path';
use Getopt::Long;

use XML::LibXML;

my ($from, $to, $tag, $tagout, $restype);
GetOptions("tag=s" => \$tag, 
	   "tagout=s" => \$tagout, 
	   "restype=s" => \$restype, 
	   "from=s" => \$from, 
	   "to=s" => \$to);
usage() unless $from;
usage() unless -d $from;
usage() unless $to;
usage() unless $tag;

$to = abs_path($to);
$tagout = $tag unless $tagout;

my $parser = XML::LibXML->new;

find({ wanted => \&wanted, follow => 1 }, $from);

#
sub wanted {
    # Only care about 'strings.xml' files
    return unless $_ =~ /^strings\.xml$/;

    my ($comment, $string) = process_input_file($_, $tag);
    if (!$string) {
	print STDERR "info: '$tag' not found in '$_'\n";
	return;
    }

    fix_tag_and_restype($string, $tagout, $restype);

    my $file = get_output_path($File::Find::dir, $to, $_);

    my $doc = get_document($file);
    my $xml = create_xml($doc, $comment, $string);

    # Output the result
    open OUTPUT, ">$file" or die "cannot open \'$file\' for writing\n";
    print OUTPUT $xml;
    close OUTPUT;

    # Pretty-print the file
    my $out = `xmllint --format $file`;
    open OUTPUT, ">$file" or die "cannot open \'$file\' for writing\n";
    print OUTPUT $out;
    close OUTPUT;
}

sub fix_tag_and_restype($$$) {
    my ($string, $tagout, $restype) = @_;
    
    $string->setAttribute("name", $tagout);
    if ($restype && $string->hasAttribute("xliff:restype")) {
	$string->setAttribute("xliff:restype", $restype);
    }
}

# Reads an xml file and looks for string elements that have a name attribute 
# with the given value and returns a comment and element.
sub process_input_file($$) {
    ($from, $tag) = @_;

    # Parse the input file and look for the requested name tag
    my $doc = $parser->parse_file($from);

    my @strings = $doc->findnodes("//string[\@name='$tag']");
    my $count = scalar @strings;
    if ($count == 0) { # The tag is not present
	return undef;
    }
    if ($count > 1) { # This is an error case. 
	print STDERR "Warning: More than one '<string>' element in file '$from' has the name attibute '$tag'\n"; 
	return undef;
    }

    # Get the comments immediately preceding the wanted node
    my @comments = $doc->findnodes("//comment()[following-sibling::string[1][\@name = '$tag']]");
    if (scalar @comments > 1) {
	print STDERR "Warning: More than one comment!\n";
    }
    
    return ($comments[0]->cloneNode(1), $strings[0]->cloneNode(1));
}

# Will construct a filename that will contain the output. Any directories 
# on the path will be created if they don't exist.
sub get_output_path($$$) {
    my ($src_path, $to_path, $filename) = @_;

    # Figure out what the target dir is
    my @path_elements = File::Spec->splitdir($src_path);
    my $target_dir = File::Spec->catfile($to_path, $path_elements[-1]);
    
    # Create output dir if needed
    File::Path->make_path($target_dir, { mode => 0777 }) unless -d "$target_dir";

    return File::Spec->catfile($target_dir, $filename);
}

sub get_document($) {
    my ($file) = @_;

    my $doc;
    if (-e $file) {
	$doc = $parser->parse_file($file);
    } else {
	$doc = XML::LibXML::Document->createDocument("1.0", "utf-8");
	my $res = $doc->createElement("resources");
	$doc->setDocumentElement($res);
    }
    return $doc;
}

sub create_xml($$$) {
    my ($doc, $comment, $string) = @_;
    
    $doc->adoptNode($comment);
    $doc->adoptNode($string);

    my ($res) = $doc->findnodes("//resources");
    if (!defined $res) { # Error
	print STDERR "Error: No valid root node found\n";
    }

    my @nss = $string->getNamespaces;
    foreach my $ns (@nss) {
	$res->setNamespace($ns->getValue, $ns->getLocalName, 0);
    }

    # Check if tag output is already present
    my @items = $doc->findnodes("//string[\@name='$tagout']");
    my $count = scalar @items;
    if ($count == 0) { # Insert
	$res->appendChild($comment);
	$res->appendChild($string);
    } 
    if ($count == 1) { 	# Update
	$items[0]->replaceNode($string)
    } 
    if ($count > 1) { # Error/Warning
	print STDERR "Warning: Tag present more than 1 time in target\n";
	return;
    }
    my $name = $string->getAttribute("name");
    print $doc->findvalue("//string[\@name='$name']"), "\n";
    foreach my $i ($string->getChildnodes()) {
	print "node: ", $i->nodeType, " - ", $i->nodeName, " - ", $i->toString, "\n";
    }


    # Look for string elements with more than one text node. If that is the case 
    # we iterate over them and get their string representation and convert them to
    # a text node (which was the intention from the beginning!)
    my @children = $string->getChildnodes();
    if (scalar @children > 1 || scalar @children == 1 && $children[0]->nodeType != 3) {
	my $text = '';
	foreach my $child (@children) {
	    $text .= $child->toString;
	    $string->removeChild($child);
	}
	$string->appendTextNode($text);
    }

    return $doc->toString;
}

sub usage {
    my ($msg) = @_;

    if ($msg) {
	print "error: $msg\n";
    }
    print "usage: $0 -tag <tag> [-tagout <tag>] [-restype <new restype>] -from <path> -to <path>\n";
    exit(1);
}
